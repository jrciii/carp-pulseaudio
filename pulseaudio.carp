; https://stackoverflow.com/questions/29977651/how-can-the-pulseaudio-asynchronous-library-be-used-to-play-raw-pcm-data
; https://github.com/tanuva/padump/blob/master/src/main.cpp
;; (Debug.sanitize-addresses)
(posix-only
 (system-include "pulse/pulseaudio.h")
 (add-pkg "libpulse"))

(register-type MainLoop "pa_mainloop")
(register-type ThreadedMainLoop "pa_threaded_mainloop")
(register-type MainLoopApi "pa_mainloop_api")
(register-type Context "pa_context")
(register-type Stream "pa_stream")
(register-type ContextNotifyCbT "pa_context_notify_cb_t")
(register-type ContextFlagsT "pa_context_flags_t")
(register-type ContextStateT "pa_context_state_t")
(register-type SpawnApi "pa_spawn_api")
(register-type CSpawnApi "const pa_spawn_api")
(register-type SampleFormatT "pa_sample_format_t")
(register-type SampleSpec "pa_sample_spec" [format SampleFormatT, rate Uint32, channels Uint8])
(register-type CSampleSpec "const pa_sample_spec")
(register-type ChannelMap "pa_channel_map")
(register-type CChannelMap "const pa_channel_map")
(register-type CString "const char*")
(register-type CVoidPP "const void**")
(register-type SizeT "size_t")
(register-type CSizeT "const size_t")
(register-type ServerInfo "pa_server_info" [default_sink_name CString])
(register-type BufferAttr "pa_buffer_attr")
(register-type StreamFlagsT "pa_stream_flags_t")
(register-type StreamStateT "pa_stream_state_t")
(deftemplate from-cstring (Fn [(Ref CString)] (Ref String))
  "char** $NAME (const char** c)"
  "$DECL {
    return (char**)c;
  }")
(defmodule PulseAudio
  (defmodule StreamFlags
    (register NoFlags StreamFlagsT "PA_STREAM_NOFLAGS"))
  (defmodule StreamState
    (defn = [a b]
      (Int.= (enum-to-int (the StreamStateT a))
             (enum-to-int (the StreamStateT b))))
    (implements = PulseAudio.StreamState.=)
    (register StreamReady StreamStateT "PA_STREAM_READY"))
  (defmodule SampleFormat
    (register SampleS16le SampleFormatT "PA_SAMPLE_S16LE"))
  (defmodule ContextState
    (defn = [a b]
      (Int.= (enum-to-int (the ContextStateT a))
             (enum-to-int (the ContextStateT b))))
    (implements = PulseAudio.ContextState.=)
    ;; (register copy (Fn [(Ref ContextStateT)] ContextStateT))
    ;; (implements copy PulseAudio.ContextState.copy)
    ;; (register str (Fn [ContextStateT] String))
    ;; (implements str PulseAudio.ContextState.str)
    ;; (defn prn [x]
      ;; (PulseAudio.ContextState.str x))
    ;; (implements prn PulseAudio.ContextState.prn)
    (register ContextReady ContextStateT "PA_CONTEXT_READY"))  
  (defmodule ContextFlags
    (defn = [a b]
      (Int.= (enum-to-int (the ContextFlagsT a))
             (enum-to-int (the ContextFlagsT b))))
    (implements = PulseAudio.ContextFlags.=)
    (defn str [a]
      (str (enum-to-int (the ContextFlagsT a))))
    (implements str PulseAudio.ContextFlags.str)
    ;; (register copy (Fn [(Ref ContextFlagsT)] ContextFlagsT))
    ;; (implements copy PulseAudio.ContextFlags.copy)
    ;; (register str (Fn [ContextFlagsT] String))
    ;; (implements str PulseAudio.ContextFlags.str)
    ;; (defn prn [x]
      ;; (PulseAudio.ContextFlags.str x))
    ;; (implements prn PulseAudio.ContextFlags.prn)
    (register ContextNoAutoSpawn ContextFlagsT "PA_CONTEXT_NOAUTOSPAWN"))
  
  (register mainloop-new (Fn [] (Ptr MainLoop)) "pa_mainloop_new")
  (register threaded-mainloop-new (Fn [] (Ptr ThreadedMainLoop)) "pa_threaded_mainloop_new")
  (register mainloop-free (Fn [(Ptr MainLoop)] ()) "pa_mainloop_free")
  (register threaded-mainloop-free (Fn [(Ptr ThreadedMainLoop)] ()) "pa_threaded_mainloop_free")
  (register mainloop-run (Fn [(Ptr MainLoop) (Ptr Int)] Int) "pa_mainloop_run")
  (register mainloop-get-api (Fn [(Ptr MainLoop)] (Ptr MainLoopApi)) "pa_mainloop_get_api")
  (register threaded-mainloop-get-api (Fn [(Ptr ThreadedMainLoop)] (Ptr MainLoopApi)) "pa_threaded_mainloop_get_api")
  (register context-set-state-callback (Fn [(Ptr Context) (Ptr ()) (Ptr ())] ()) "pa_context_set_state_callback")
  (register context-new (Fn [(Ptr MainLoopApi) (Ptr CChar)] (Ptr Context)) "pa_context_new")
  (register context-connect (Fn [(Ptr Context) (Ptr CChar) ContextFlagsT (Ptr CSpawnApi)] Int) "pa_context_connect")
  (register context-get-state (Fn [(Ptr Context)] ContextStateT) "pa_context_get_state")
  (register context-is-good (Fn [ContextStateT] Int) "PA_CONTEXT_IS_GOOD")
  (register context-get-server-info (Fn [(Ptr Context) (Ptr ()) (Ptr ())] ()) "pa_context_get_server_info")
  (register threaded-mainloop-lock (Fn [(Ptr ThreadedMainLoop)] ()) "pa_threaded_mainloop_lock")
  (register threaded-mainloop-start (Fn [(Ptr ThreadedMainLoop)] Int) "pa_threaded_mainloop_start")
  (register threaded-mainloop-signal (Fn [(Ptr ThreadedMainLoop) Int] ()) "pa_threaded_mainloop_signal")
  (register threaded-mainloop-wait (Fn [(Ptr ThreadedMainLoop)] ()) "pa_threaded_mainloop_wait")
  (register threaded-mainloop-unlock (Fn [(Ptr ThreadedMainLoop)] ()) "pa_threaded_mainloop_unlock")
  (register mainloop-quit (Fn [(Ptr MainLoop) Int] ()) "pa_mainloop_quit")
  (register stream-new (Fn [(Ptr Context) (Ptr CChar) (Ref SampleSpec) (Ref ChannelMap)] (Ptr Stream)) "pa_stream_new")
  (register stream-set-state-callback (Fn [(Ptr Stream) (Ptr ()) (Ptr ())] ()) "pa_stream_set_state_callback")
  (register stream-set-read-callback (Fn [(Ptr Stream) (Ptr ()) (Ptr ())] ()) "pa_stream_set_read_callback")
  (register stream-connect-record (Fn [(Ptr Stream) (Ptr CChar) (Ref BufferAttr) StreamFlagsT] Int) "pa_stream_connect_record")
  (register stream-get-state (Fn [(Ptr Stream)] StreamStateT) "pa_stream_get_state")
  (register stream-peek (Fn [(Ptr Stream) CVoidPP (Ptr SizeT)] Int) "pa_stream_peek")
  (register stream-drop (Fn [(Ptr Stream)] Int) "pa_stream_drop"))

(use PulseAudio)

(sig context-state-cb (Fn [(Ptr Context) (Ptr ThreadedMainLoop)] ()))
(defn context-state-cb [context mainloop]
  (do
    (IO.println "Context State CB")
    (threaded-mainloop-signal mainloop 0)))

(sig stream-notify-cb (Fn [(Ptr Stream) (Ptr ())] ()))
(defn stream-notify-cb [stream userdata]
  (let-do [state (stream-get-state stream)]
    (println* "Stream state: " &(str (enum-to-int state)))))

(sig int16np (Fn [] (Ptr Int16)))
(defn int16np [] NULL)

(sig stream-read-cb (Fn [(Ptr Stream) CSizeT (Ptr ())] ()))
(defn stream-read-cb [stream nbytes userdata]
  (let-do [data (int16np)
           actualbytes 0]
    (assert (= 0 (stream-peek stream (Unsafe.coerce &data) (Unsafe.coerce &actualbytes))))
    (if (> actualbytes 0)
      (do
        (assert (= 0 (stream-drop stream)))
        (if (Pointer.eq NULL data)
          (println* "Encountered hole")
          (println* "Read num bytes " &(str actualbytes) " " &(str (Pointer.to-value data)))))
      (println* "Read no bytes from stream"))))

;; (sig server-info-cb (Fn [(Ptr Context) (Ref ServerInfo) (Ptr ())] ()))
(defn server-info-cb [context info userdata]
  (let-do [u (the (Ptr ()) userdata)
           spec (SampleSpec.init SampleFormat.SampleS16le (Uint32.from-long 44100l) (Uint8.from-long 1l))
           stream (stream-new context (String.cstr "output monitor") &spec (Pointer.to-ref NULL))
           monitor (String.concat &[@(from-cstring (ServerInfo.default_sink_name info)) @".monitor"])]
    (stream-set-state-callback stream (Function.unsafe-ptr &stream-notify-cb) NULL)
    (stream-set-read-callback stream (Function.unsafe-ptr &stream-read-cb) NULL)
    (println* "server info cb. monitor: " &monitor)
    (assert (= 0 (stream-connect-record stream (String.cstr &monitor) (Pointer.to-ref NULL) StreamFlags.NoFlags)))
    (println* "Connected to " &monitor)))

(defn stream-state-cb [stream mainloop]
  (threaded-mainloop-signal mainloop 0))

(defn stream-success-cb [stream success userdata]
  ())

(defn main []
  (let-do [mainloop (threaded-mainloop-new)
           mainloop-api (threaded-mainloop-get-api mainloop)
           context (context-new mainloop-api (String.cstr "test"))
           state-readyp (fn [] (let-do [state (context-get-state context)]
                                 (assert (= 1 (context-is-good state)))
                                 (= ContextState.ContextReady state)))]
    (IO.println "Beginning PulseAudio Test")
    (threaded-mainloop-lock mainloop)
    (context-set-state-callback context (Function.unsafe-ptr &context-state-cb) (Unsafe.coerce mainloop))
    (IO.println "Set CB")
    (assert (= 0 (threaded-mainloop-start mainloop)))
    (assert (= 0 (context-connect context NULL ContextFlags.ContextNoAutoSpawn NULL)))
    (IO.println "Waiting for context ready")
    (until (state-readyp) (do (IO.println "About to wait") (threaded-mainloop-wait mainloop) (IO.println "Done waiting")))
    (context-get-server-info context (Function.unsafe-ptr &server-info-cb) NULL)
    (threaded-mainloop-unlock mainloop)
    (sleep-seconds 1)
    0))
